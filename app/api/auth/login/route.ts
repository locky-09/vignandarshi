import { NextResponse } from "next/server"
import { prisma } from "@/lib/prisma"
import { cookies } from "next/headers"
import jwt from "jsonwebtoken"
import { withApiLogging } from "@/lib/api-logger"

const JWT_SECRET = process.env.JWT_SECRET || "dev-secret-change-me"

async function loginHandler(req: Request) {
  try {
    const { email, password } = (await req.json()) as { email: string; password: string }
    if (!email || !password) return NextResponse.json({ error: "Missing email or password" }, { status: 400 })

    // Seed a test admin user if database is empty (developer convenience)
    // This allows immediate testing without a manual seed step.
    const userCount = await prisma.user.count().catch(() => 0)
    if (userCount === 0) {
      try {
        await prisma.user.create({
          data: {
            // id will be autogenerated by Prisma for MongoDB
            email: "admin@example.com",
            name: "Admin",
            role: "Admin" as any,
            password: "admin123",
          },
        })
      } catch {}
    }

    const user = await prisma.user.findUnique({ where: { email } })
    if (!user || user.password !== password) {
      return NextResponse.json({ error: "Invalid credentials" }, { status: 401 })
    }

    const token = jwt.sign({ sub: user.id, role: user.role, email: user.email }, JWT_SECRET, { expiresIn: "7d" })
    const res = NextResponse.json({ ok: true, user: { id: user.id, email: user.email, name: user.name, role: user.role } })
    const cookieStore = await cookies()
    cookieStore.set("lsbms_token", token, { httpOnly: true, sameSite: "lax", maxAge: 60 * 60 * 24 * 7, path: "/" })
    return res
  } catch (e: any) {
    return NextResponse.json({ error: e?.message || "Invalid body" }, { status: 400 })
  }
}

export const POST = withApiLogging(loginHandler)


