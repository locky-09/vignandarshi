import { NextResponse } from "next/server"
import { appendJsonArray, readJson, writeJson } from "@/lib/storage"
import { prisma } from "@/lib/prisma"
import { withApiLogging } from "@/lib/api-logger"

type User = { id: string; name: string; role: "Student" | "Faculty" | "Organizer"; password: string }

async function getUsers() {
  try {
    const users = await prisma.user.findMany({ select: { id: true, email: true, name: true, role: true } })
    return NextResponse.json(users)
  } catch {
    const users = await readJson<User[]>("users", [])
    return NextResponse.json(users.map(({ password, ...rest }) => rest))
  }
}

async function createUser(req: Request) {
  try {
    const body = (await req.json()) as Partial<User>
    if (!body.id || !body.name || !body.password) {
      return NextResponse.json({ error: "Missing id, name, or password" }, { status: 400 })
    }
    const role = (body.role as any) || "Student"
    // Try DB first
    try {
      await prisma.user.create({
        data: {
          email: `${String(body.id)}@example.com`,
          name: String(body.name),
          role: role as any,
          password: String(body.password),
        },
      })
      return NextResponse.json({ ok: true })
    } catch {}

    const user: User = { id: String(body.id), name: String(body.name), role, password: String(body.password) }
    const existing = await readJson<User[]>("users", [])
    if (existing.some((u) => u.id === user.id)) {
      return NextResponse.json({ error: "User already exists" }, { status: 409 })
    }
    await appendJsonArray<User>("users", user)
    return NextResponse.json({ ok: true })
  } catch (e: any) {
    return NextResponse.json({ error: e?.message || "Invalid body" }, { status: 400 })
  }
}

async function deleteUser(req: Request) {
  const { searchParams } = new URL(req.url)
  const id = searchParams.get("id")
  if (!id) return NextResponse.json({ error: "Missing id" }, { status: 400 })
  try {
    // When using Prisma with Mongo, ids are ObjectIds generated by DB.
    // Users created via this API use email derived from provided id.
    // Prefer deleting by email to avoid ObjectId mismatch.
    await prisma.user.delete({ where: { email: `${id}@example.com` } })
    return NextResponse.json({ ok: true })
  } catch {}
  const users = await readJson<User[]>("users", [])
  const next = users.filter((u) => u.id !== id)
  await writeJson("users", next)
  return NextResponse.json({ ok: true })
}

export const GET = withApiLogging(getUsers)
export const POST = withApiLogging(createUser)
export const DELETE = withApiLogging(deleteUser)


